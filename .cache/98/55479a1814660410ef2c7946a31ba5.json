{"id":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","dependencies":[{"name":"E:\\zhanglihua\\projects\\front\\cesium-study\\package.json","includedInParent":true,"mtime":1657261506924},{"name":"E:\\zhanglihua\\projects\\front\\cesium-study\\node_modules\\cesium\\package.json","includedInParent":true,"mtime":1657261457191}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n//This file is automatically rebuilt by the Cesium build process.\nvar _default = \"precision highp float;\\n\\\n\\n\\\nczm_modelVertexOutput defaultVertexOutput(vec3 positionMC) {\\n\\\n    czm_modelVertexOutput vsOutput;\\n\\\n    vsOutput.positionMC = positionMC;\\n\\\n    vsOutput.pointSize = 1.0;\\n\\\n    return vsOutput;\\n\\\n}\\n\\\n\\n\\\nvoid main() \\n\\\n{\\n\\\n    // Initialize the attributes struct with all\\n\\\n    // attributes except quantized ones.\\n\\\n    ProcessedAttributes attributes;\\n\\\n    initializeAttributes(attributes);\\n\\\n\\n\\\n    // Dequantize the quantized ones and add them to the\\n\\\n    // attributes struct.\\n\\\n    #ifdef USE_DEQUANTIZATION\\n\\\n    dequantizationStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_MORPH_TARGETS\\n\\\n    morphTargetsStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_SKINNING\\n\\\n    skinningStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the bitangent according to the formula in the glTF spec.\\n\\\n    // Normal and tangents can be affected by morphing and skinning, so\\n\\\n    // the bitangent should not be computed until their values are finalized.\\n\\\n    #ifdef HAS_BITANGENTS\\n\\\n    attributes.bitangentMC = normalize(cross(attributes.normalMC, attributes.tangentMC) * attributes.tangentSignMC);\\n\\\n    #endif\\n\\\n\\n\\\n    FeatureIds featureIds;\\n\\\n    featureIdStage(featureIds, attributes);\\n\\\n\\n\\\n    #ifdef HAS_SELECTED_FEATURE_ID\\n\\\n    SelectedFeature feature;\\n\\\n    selectedFeatureIdStage(feature, featureIds);\\n\\\n    cpuStylingStage(attributes.positionMC, feature);\\n\\\n    #endif\\n\\\n\\n\\\n    #if defined(USE_2D_POSITIONS) || defined(USE_2D_INSTANCING)\\n\\\n    // The scene mode 2D pipeline stage and instancing stage add a different\\n\\\n    // model view matrix to accurately project the model to 2D. However, the\\n\\\n    // output positions and normals should be transformed by the 3D matrices\\n\\\n    // to keep the data the same for the fragment shader.\\n\\\n    mat4 modelView = czm_modelView3D;\\n\\\n    mat3 normal = czm_normal3D;\\n\\\n    #else\\n\\\n    // These are used for individual model projection because they will\\n\\\n    // automatically change based on the scene mode.\\n\\\n    mat4 modelView = czm_modelView;\\n\\\n    mat3 normal = czm_normal;\\n\\\n    #endif\\n\\\n    \\n\\\n\\n\\\n    // Update the position for this instance in place\\n\\\n    #ifdef HAS_INSTANCING\\n\\\n\\n\\\n        // The legacy instance stage is used when rendering i3dm models that \\n\\\n        // encode instances transforms in world space, as opposed to glTF models\\n\\\n        // that use EXT_mesh_gpu_instancing, where instance transforms are encoded\\n\\\n        // in object space.\\n\\\n        #ifdef USE_LEGACY_INSTANCING\\n\\\n        mat4 instanceModelView;\\n\\\n        mat3 instanceModelViewInverseTranspose;\\n\\\n        \\n\\\n        legacyInstancingStage(attributes, instanceModelView, instanceModelViewInverseTranspose);\\n\\\n\\n\\\n        modelView = instanceModelView;\\n\\\n        normal = instanceModelViewInverseTranspose;\\n\\\n        #else\\n\\\n        instancingStage(attributes);\\n\\\n        #endif\\n\\\n\\n\\\n        #ifdef USE_PICKING\\n\\\n        v_pickColor = a_pickColor;\\n\\\n        #endif\\n\\\n\\n\\\n    #endif\\n\\\n\\n\\\n    Metadata metadata;\\n\\\n    metadataStage(metadata, attributes);\\n\\\n\\n\\\n    #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n    czm_modelVertexOutput vsOutput = defaultVertexOutput(attributes.positionMC);\\n\\\n    customShaderStage(vsOutput, attributes, featureIds, metadata);\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the final position in each coordinate system needed.\\n\\\n    // This also sets gl_Position.\\n\\\n    geometryStage(attributes, modelView, normal);    \\n\\\n\\n\\\n    #ifdef HAS_SILHOUETTE\\n\\\n    silhouetteStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef PRIMITIVE_TYPE_POINTS\\n\\\n        #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n        gl_PointSize = vsOutput.pointSize;\\n\\\n        #elif defined(USE_POINT_CLOUD_ATTENUATION)\\n\\\n        gl_PointSize = pointCloudAttenuationStage(v_positionEC);\\n\\\n        #else\\n\\\n        gl_PointSize = 1.0;\\n\\\n        #endif\\n\\\n    #endif\\n\\\n}\\n\\\n\";\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":7,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":15},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":2,"column":15}},{"generated":{"line":9,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":3,"column":0}},{"generated":{"line":10,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":4,"column":0}},{"generated":{"line":11,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":5,"column":0}},{"generated":{"line":12,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":6,"column":0}},{"generated":{"line":13,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":7,"column":0}},{"generated":{"line":14,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":8,"column":0}},{"generated":{"line":15,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":9,"column":0}},{"generated":{"line":16,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":10,"column":0}},{"generated":{"line":17,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":11,"column":0}},{"generated":{"line":18,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":12,"column":0}},{"generated":{"line":19,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":13,"column":0}},{"generated":{"line":20,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":14,"column":0}},{"generated":{"line":21,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":15,"column":0}},{"generated":{"line":22,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":16,"column":0}},{"generated":{"line":23,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":17,"column":0}},{"generated":{"line":24,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":18,"column":0}},{"generated":{"line":25,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":19,"column":0}},{"generated":{"line":26,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":20,"column":0}},{"generated":{"line":27,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":21,"column":0}},{"generated":{"line":28,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":22,"column":0}},{"generated":{"line":29,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":23,"column":0}},{"generated":{"line":30,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":24,"column":0}},{"generated":{"line":31,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":25,"column":0}},{"generated":{"line":32,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":26,"column":0}},{"generated":{"line":33,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":27,"column":0}},{"generated":{"line":34,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":28,"column":0}},{"generated":{"line":35,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":29,"column":0}},{"generated":{"line":36,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":30,"column":0}},{"generated":{"line":37,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":31,"column":0}},{"generated":{"line":38,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":32,"column":0}},{"generated":{"line":39,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":33,"column":0}},{"generated":{"line":40,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":34,"column":0}},{"generated":{"line":41,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":35,"column":0}},{"generated":{"line":42,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":36,"column":0}},{"generated":{"line":43,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":37,"column":0}},{"generated":{"line":44,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":38,"column":0}},{"generated":{"line":45,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":39,"column":0}},{"generated":{"line":46,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":40,"column":0}},{"generated":{"line":47,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":41,"column":0}},{"generated":{"line":48,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":42,"column":0}},{"generated":{"line":49,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":43,"column":0}},{"generated":{"line":50,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":44,"column":0}},{"generated":{"line":51,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":45,"column":0}},{"generated":{"line":52,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":46,"column":0}},{"generated":{"line":53,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":47,"column":0}},{"generated":{"line":54,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":48,"column":0}},{"generated":{"line":55,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":49,"column":0}},{"generated":{"line":56,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":50,"column":0}},{"generated":{"line":57,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":51,"column":0}},{"generated":{"line":58,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":52,"column":0}},{"generated":{"line":59,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":53,"column":0}},{"generated":{"line":60,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":54,"column":0}},{"generated":{"line":61,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":55,"column":0}},{"generated":{"line":62,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":56,"column":0}},{"generated":{"line":63,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":57,"column":0}},{"generated":{"line":64,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":58,"column":0}},{"generated":{"line":65,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":59,"column":0}},{"generated":{"line":66,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":60,"column":0}},{"generated":{"line":67,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":61,"column":0}},{"generated":{"line":68,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":62,"column":0}},{"generated":{"line":69,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":63,"column":0}},{"generated":{"line":70,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":64,"column":0}},{"generated":{"line":71,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":65,"column":0}},{"generated":{"line":72,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":66,"column":0}},{"generated":{"line":73,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":67,"column":0}},{"generated":{"line":74,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":68,"column":0}},{"generated":{"line":75,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":69,"column":0}},{"generated":{"line":76,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":70,"column":0}},{"generated":{"line":77,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":71,"column":0}},{"generated":{"line":78,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":72,"column":0}},{"generated":{"line":79,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":73,"column":0}},{"generated":{"line":80,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":74,"column":0}},{"generated":{"line":81,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":75,"column":0}},{"generated":{"line":82,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":76,"column":0}},{"generated":{"line":83,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":77,"column":0}},{"generated":{"line":84,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":78,"column":0}},{"generated":{"line":85,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":79,"column":0}},{"generated":{"line":86,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":80,"column":0}},{"generated":{"line":87,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":81,"column":0}},{"generated":{"line":88,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":82,"column":0}},{"generated":{"line":89,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":83,"column":0}},{"generated":{"line":90,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":84,"column":0}},{"generated":{"line":91,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":85,"column":0}},{"generated":{"line":92,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":86,"column":0}},{"generated":{"line":93,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":87,"column":0}},{"generated":{"line":94,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":88,"column":0}},{"generated":{"line":95,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":89,"column":0}},{"generated":{"line":96,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":90,"column":0}},{"generated":{"line":97,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":91,"column":0}},{"generated":{"line":98,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":92,"column":0}},{"generated":{"line":99,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":93,"column":0}},{"generated":{"line":100,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":94,"column":0}},{"generated":{"line":101,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":95,"column":0}},{"generated":{"line":102,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":96,"column":0}},{"generated":{"line":103,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":97,"column":0}},{"generated":{"line":104,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":98,"column":0}},{"generated":{"line":105,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":99,"column":0}},{"generated":{"line":106,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":100,"column":0}},{"generated":{"line":107,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":101,"column":0}},{"generated":{"line":108,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":102,"column":0}},{"generated":{"line":109,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":103,"column":0}},{"generated":{"line":110,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":104,"column":0}},{"generated":{"line":111,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":105,"column":0}},{"generated":{"line":112,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":106,"column":0}},{"generated":{"line":113,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":107,"column":0}},{"generated":{"line":114,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":108,"column":0}},{"generated":{"line":115,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":109,"column":0}},{"generated":{"line":116,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":110,"column":0}},{"generated":{"line":117,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":111,"column":0}},{"generated":{"line":118,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":112,"column":0}},{"generated":{"line":119,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":113,"column":0}},{"generated":{"line":120,"column":0},"source":"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js","original":{"line":114,"column":0}}],"sources":{"node_modules/cesium/Source/Shaders/ModelExperimental/ModelExperimentalVS.js":"//This file is automatically rebuilt by the Cesium build process.\nexport default \"precision highp float;\\n\\\n\\n\\\nczm_modelVertexOutput defaultVertexOutput(vec3 positionMC) {\\n\\\n    czm_modelVertexOutput vsOutput;\\n\\\n    vsOutput.positionMC = positionMC;\\n\\\n    vsOutput.pointSize = 1.0;\\n\\\n    return vsOutput;\\n\\\n}\\n\\\n\\n\\\nvoid main() \\n\\\n{\\n\\\n    // Initialize the attributes struct with all\\n\\\n    // attributes except quantized ones.\\n\\\n    ProcessedAttributes attributes;\\n\\\n    initializeAttributes(attributes);\\n\\\n\\n\\\n    // Dequantize the quantized ones and add them to the\\n\\\n    // attributes struct.\\n\\\n    #ifdef USE_DEQUANTIZATION\\n\\\n    dequantizationStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_MORPH_TARGETS\\n\\\n    morphTargetsStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef HAS_SKINNING\\n\\\n    skinningStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the bitangent according to the formula in the glTF spec.\\n\\\n    // Normal and tangents can be affected by morphing and skinning, so\\n\\\n    // the bitangent should not be computed until their values are finalized.\\n\\\n    #ifdef HAS_BITANGENTS\\n\\\n    attributes.bitangentMC = normalize(cross(attributes.normalMC, attributes.tangentMC) * attributes.tangentSignMC);\\n\\\n    #endif\\n\\\n\\n\\\n    FeatureIds featureIds;\\n\\\n    featureIdStage(featureIds, attributes);\\n\\\n\\n\\\n    #ifdef HAS_SELECTED_FEATURE_ID\\n\\\n    SelectedFeature feature;\\n\\\n    selectedFeatureIdStage(feature, featureIds);\\n\\\n    cpuStylingStage(attributes.positionMC, feature);\\n\\\n    #endif\\n\\\n\\n\\\n    #if defined(USE_2D_POSITIONS) || defined(USE_2D_INSTANCING)\\n\\\n    // The scene mode 2D pipeline stage and instancing stage add a different\\n\\\n    // model view matrix to accurately project the model to 2D. However, the\\n\\\n    // output positions and normals should be transformed by the 3D matrices\\n\\\n    // to keep the data the same for the fragment shader.\\n\\\n    mat4 modelView = czm_modelView3D;\\n\\\n    mat3 normal = czm_normal3D;\\n\\\n    #else\\n\\\n    // These are used for individual model projection because they will\\n\\\n    // automatically change based on the scene mode.\\n\\\n    mat4 modelView = czm_modelView;\\n\\\n    mat3 normal = czm_normal;\\n\\\n    #endif\\n\\\n    \\n\\\n\\n\\\n    // Update the position for this instance in place\\n\\\n    #ifdef HAS_INSTANCING\\n\\\n\\n\\\n        // The legacy instance stage is used when rendering i3dm models that \\n\\\n        // encode instances transforms in world space, as opposed to glTF models\\n\\\n        // that use EXT_mesh_gpu_instancing, where instance transforms are encoded\\n\\\n        // in object space.\\n\\\n        #ifdef USE_LEGACY_INSTANCING\\n\\\n        mat4 instanceModelView;\\n\\\n        mat3 instanceModelViewInverseTranspose;\\n\\\n        \\n\\\n        legacyInstancingStage(attributes, instanceModelView, instanceModelViewInverseTranspose);\\n\\\n\\n\\\n        modelView = instanceModelView;\\n\\\n        normal = instanceModelViewInverseTranspose;\\n\\\n        #else\\n\\\n        instancingStage(attributes);\\n\\\n        #endif\\n\\\n\\n\\\n        #ifdef USE_PICKING\\n\\\n        v_pickColor = a_pickColor;\\n\\\n        #endif\\n\\\n\\n\\\n    #endif\\n\\\n\\n\\\n    Metadata metadata;\\n\\\n    metadataStage(metadata, attributes);\\n\\\n\\n\\\n    #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n    czm_modelVertexOutput vsOutput = defaultVertexOutput(attributes.positionMC);\\n\\\n    customShaderStage(vsOutput, attributes, featureIds, metadata);\\n\\\n    #endif\\n\\\n\\n\\\n    // Compute the final position in each coordinate system needed.\\n\\\n    // This also sets gl_Position.\\n\\\n    geometryStage(attributes, modelView, normal);    \\n\\\n\\n\\\n    #ifdef HAS_SILHOUETTE\\n\\\n    silhouetteStage(attributes);\\n\\\n    #endif\\n\\\n\\n\\\n    #ifdef PRIMITIVE_TYPE_POINTS\\n\\\n        #ifdef HAS_CUSTOM_VERTEX_SHADER\\n\\\n        gl_PointSize = vsOutput.pointSize;\\n\\\n        #elif defined(USE_POINT_CLOUD_ATTENUATION)\\n\\\n        gl_PointSize = pointCloudAttenuationStage(v_positionEC);\\n\\\n        #else\\n\\\n        gl_PointSize = 1.0;\\n\\\n        #endif\\n\\\n    #endif\\n\\\n}\\n\\\n\";\n"},"lineCount":null}},"error":null,"hash":"e27ef0553c613e6a69c354eb4bbc77ae","cacheData":{"env":{}}}